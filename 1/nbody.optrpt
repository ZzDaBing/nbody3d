Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] nbody.c(91,32)
  -> INLINE: (93,30) atoll(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (113,3) init(particle_t, u64)
  -> INLINE: (128,5) move_particles(particle_t, const f32, u64)
  -> INLINE: (150,5) init(particle_t, u64)
  -> INLINE: (151,29) rdtsc(void)
  -> INLINE: (153,7) move_particles(particle_t, const f32, u64)
  -> INLINE: (154,27) rdtsc(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(31,3) inlined into nbody.c(113,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (34:21) and call:rand(void) (46:22)
LOOP END

LOOP BEGIN at nbody.c(124,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(56,3) inlined into nbody.c(128,5)
      remark #25236: Loop with pragma of trip count = 16384 ignored for large value
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(128,5)
      <Peeled loop for vectorization>
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(128,5)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(128,5)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.c(56,3) inlined into nbody.c(128,5)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(128,5)
      <Peeled loop for vectorization>
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(128,5)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(128,5)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.c(82,5) inlined into nbody.c(128,5)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(82,5) inlined into nbody.c(128,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(82,5) inlined into nbody.c(128,5)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(31,3) inlined into nbody.c(150,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (34:21) and call:rand(void) (46:22)
LOOP END

LOOP BEGIN at nbody.c(152,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(56,3) inlined into nbody.c(153,7)
      remark #25236: Loop with pragma of trip count = 16384 ignored for large value
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(153,7)
      <Peeled loop for vectorization>
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(153,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(153,7)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.c(56,3) inlined into nbody.c(153,7)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(153,7)
      <Peeled loop for vectorization>
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(153,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(63,7) inlined into nbody.c(153,7)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.c(82,5) inlined into nbody.c(153,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(82,5) inlined into nbody.c(153,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(82,5) inlined into nbody.c(153,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(91,32):remark #34051: REGISTER ALLOCATION : [main] nbody.c:91

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   49[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k2]
        
    Routine temporaries
        Total         :    1737
            Global    :     332
            Local     :    1405
        Regenerable   :      72
        Spilled       :      44
        
    Routine stack
        Variables     :     100 bytes*
            Reads     :      26 [1.21e+00 ~ 1.2%]
            Writes    :      26 [1.21e+00 ~ 1.2%]
        Spills        :     344 bytes*
            Reads     :     114 [7.28e-01 ~ 0.7%]
            Writes    :      61 [1.07e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rdtsc(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (rdtsc(void)) nbody.c(22,1)

===========================================================================

Begin optimization report for: move_particles(particle_t, const f32, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (move_particles(particle_t, const f32, u64)) [4] nbody.c(51,55)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(56,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(63,7)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(63,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(63,7)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(82,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between p.p[i] (84:7) and p.p[i] (86:7)
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(51,55):remark #34051: REGISTER ALLOCATION : [move_particles] nbody.c:51

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   49[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k2]
        
    Routine temporaries
        Total         :     218
            Global    :      56
            Local     :     162
        Regenerable   :      12
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :       9 [3.96e-01 ~ 0.4%]
            Writes    :       9 [1.43e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init(particle_t, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init(particle_t, u64)) [5] nbody.c(30,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(31,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (34:21) and call:rand(void) (46:22)
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(30,1):remark #34051: REGISTER ALLOCATION : [init] nbody.c:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      50
            Global    :      35
            Local     :      15
        Regenerable   :       9
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      10 [7.85e+00 ~ 7.8%]
            Writes    :       9 [5.04e+00 ~ 5.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
